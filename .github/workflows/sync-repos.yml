name: Sync Repositories

on:
  push:
    branches:
      - master

  workflow_dispatch:
    inputs:
      destination_org:
        description: "Destination organization name"
        required: true
      destination_repo:
        description: "Destination repository name"
        required: true
      pr_title:
        description: "Pull request title"
        required: true
        default: "Sync changes from source repository"
      pr_body:
        description: "Pull request body"
        required: false
        default: "This PR syncs changes from the source repository."
      branch_name:
        description: "Branch name to create in destination"
        required: true
        default: "sync-changes"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.email "romario.silva@syniti.com"
          git config --global user.name "romario-syniti"

      - name: Set environment variables
        id: set-vars
        run: |
          # Set variables based on workflow input or defaults
          echo "SOURCE_ORG=$(echo ${{ github.repository }} | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo ${{ github.repository }} | cut -d '/' -f 2)" >> $GITHUB_ENV

          # Use workflow dispatch inputs if available, otherwise use default values
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DEST_ORG=${{ github.event.inputs.destination_org }}" >> $GITHUB_ENV
            echo "DEST_REPO=${{ github.event.inputs.destination_repo }}" >> $GITHUB_ENV
            echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
            echo "PR_TITLE=${{ github.event.inputs.pr_title }}" >> $GITHUB_ENV
            echo "PR_BODY=${{ github.event.inputs.pr_body }}" >> $GITHUB_ENV
          else
            # Default values when triggered by push event
            echo "DEST_ORG=${{ secrets.DESTINATION_ORG }}" >> $GITHUB_ENV
            echo "DEST_REPO=${{ secrets.DESTINATION_REPO }}" >> $GITHUB_ENV
            echo "BRANCH_NAME=sync-changes-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
            echo "PR_TITLE=Sync changes from ${{ github.repository }}" >> $GITHUB_ENV
            echo "PR_BODY=This PR syncs changes from the source repository ${{ github.repository }}." >> $GITHUB_ENV
          fi

      - name: Clone destination repository
        run: |
          git clone https://x-access-token:${{ secrets.PAT }}@github.com/${{ env.DEST_ORG }}/${{ env.DEST_REPO }}.git dest-repo

      - name: Sync repositories
        working-directory: dest-repo
        run: |
          # Create and checkout a new branch
          git checkout -b ${{ env.BRANCH_NAME }}

          # Add source repo as remote
          git remote add source https://x-access-token:${{ secrets.PAT }}@github.com/${{ env.SOURCE_ORG }}/${{ env.SOURCE_REPO }}.git
          git fetch source

          # Save the current HEAD to restore after the comparison
          CURRENT_HEAD=$(git rev-parse HEAD)

          # Create a temporary branch of source/master for comparison
          git checkout -b temp-source-master source/master

          # Go back to our sync branch
          git checkout ${{ env.BRANCH_NAME }}

          # Use git checkout to replace all files with source/master versions
          echo "Applying changes from source repository..."
          git rm -rf .
          git checkout temp-source-master -- .

          # Stage all changes
          git add -A

          # Commit the changes
          git commit -m "Sync changes from ${{ env.SOURCE_ORG }}/${{ env.SOURCE_REPO }}" || echo "No changes to commit"

          # Push new branch to destination
          git push origin ${{ env.BRANCH_NAME }}

          # Clean up temp branch
          git branch -D temp-source-master

      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { DEST_ORG, DEST_REPO, BRANCH_NAME, PR_TITLE, PR_BODY } = process.env;

            try {
              const response = await github.rest.pulls.create({
                owner: DEST_ORG,
                repo: DEST_REPO,
                title: PR_TITLE,
                body: PR_BODY,
                head: BRANCH_NAME,
                base: 'master'
              });
              
              console.log(`Pull request created: ${response.data.html_url}`);
            } catch (error) {
              console.error('Error creating pull request:', error);
              core.setFailed('Failed to create pull request');
            }
        env:
          DEST_ORG: ${{ env.DEST_ORG }}
          DEST_REPO: ${{ env.DEST_REPO }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          PR_TITLE: ${{ env.PR_TITLE }}
          PR_BODY: ${{ env.PR_BODY }}
